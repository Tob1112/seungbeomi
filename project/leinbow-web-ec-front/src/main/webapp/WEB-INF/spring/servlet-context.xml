<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:context="http://www.springframework.org/schema/context"
    xmlns:mvc="http://www.springframework.org/schema/mvc"
    xmlns:p="http://www.springframework.org/schema/p"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
                http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
                http://www.springframework.org/schema/context
                http://www.springframework.org/schema/context/spring-context-3.0.xsd
                http://www.springframework.org/schema/mvc
                http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd">

    <!--
        This declaration will cause Spring to locate every @Component,
        @Repository and @Service in your application. In practical terms this
        allows you to write a POJO and then simply annotate the new POJO as an
        @Service and Spring will automatically detect, instantiate and
        dependency inject your service at startup time. Importantly, you can
        then also have your new service injected into any other class that
        requires it simply by declaring a field for your service inside the
        relying class and Spring will inject it. Note that two exclude filters
        are declared. The first ensures that Spring doesn't spend time
        introspecting Roo-specific ITD aspects. The second ensures Roo doesn't
        instantiate your @Controller classes, as these should be instantiated
        by a web tier application context. Refer to web.xml for more details
        about the web tier application context setup services.

        Furthermore, this turns on @Autowired, @PostConstruct etc support. These
        annotations allow you to use common Spring and Java Enterprise Edition
        annotations in your classes without needing to do any special configuration.
        The most commonly used annotation is @Autowired, which instructs Spring to
        dependency inject an object into your class.
    -->

    <!--
        @Resource annotatioを有効にする。
     -->
    <!--
    <context:annotation-config/>
     -->

    <!-- Scans within the base package of the application for @Components to configure as beans -->
    <!-- The controllers are autodetected POJOs labeled with the @Controller annotation. -->
    <!--
        @Controller annotaionを有効にする。
     -->
    <context:component-scan base-package="com.leinbow.web" use-default-filters="false">
        <context:include-filter expression="org.springframework.stereotype.Controller" type="annotation"/>
    </context:component-scan>

    <!-- Turns on support for mapping requests to Spring MVC @Controller methods
         Also registers default Formatters and Validators for use across all @Controllers -->
    <mvc:annotation-driven/>

    <!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources -->
    <!-- classpath:/META-INF/web-resources/はに以下のdependency jarにある
        <groupId>org.springframework.webflow</groupId>
        <artifactId>spring-js-resources</artifactId>

       TODO : カ スタム用<mvc:resources>を追加する必要がある
    -->
    <mvc:resources location="/resources/images/" mapping="/images/**"/>
    <mvc:resources location="/resources/g_images/" mapping="/g_images/**"/>
    <mvc:resources location="/resources/files_top/" mapping="/files_top/**"/>
    <mvc:resources location="/resources/js/" mapping="/js/**"/>
    <mvc:resources location="/resources/common_shop/" mapping="/common_shop/**"/>
    <mvc:resources location="/resources/common/" mapping="/common/**"/>
    <mvc:resources location="/resources/per_images/" mapping="/per_images/**"/>

    <!-- Allows for mapping the DispatcherServlet to "/" by forwarding static resource requests to the container's default Servlet -->
    <mvc:default-servlet-handler/>

    <!-- register "global" interceptor beans to apply to all registered HandlerMappings -->
    <mvc:interceptors>
        <bean class="org.springframework.web.servlet.theme.ThemeChangeInterceptor"/>
        <bean class="org.springframework.web.servlet.i18n.LocaleChangeInterceptor" p:paramName="lang"/>
    </mvc:interceptors>

    <!-- selects a static view for rendering without the need for an explicit controller -->
    <mvc:view-controller path="/login"/>
    <mvc:view-controller path="/" view-name="index"/>
    <mvc:view-controller path="/uncaughtException"/>
    <mvc:view-controller path="/resourceNotFound"/>
    <mvc:view-controller path="/dataAccessFailure"/>

    <!-- Resolves localized messages*.properties and application.properties files in the application to	allow for internationalization.
        The messages*.properties files translate Roo generated messages which are part of the admin interface, the application.properties
        resource bundle localizes all application specific messages such as entity names and menu items. -->
    <bean class="org.springframework.context.support.ReloadableResourceBundleMessageSource" id="messageSource" p:basenames="WEB-INF/i18n/messages,WEB-INF/i18n/application, messages" p:fallbackToSystemLocale="false"/>

    <!-- store preferred language configuration in a cookie -->
    <bean class="org.springframework.web.servlet.i18n.CookieLocaleResolver" id="localeResolver" p:cookieName="locale"/>

    <!-- resolves localized <theme_name>.properties files in the classpath to allow for theme support -->
    <bean class="org.springframework.ui.context.support.ResourceBundleThemeSource" id="themeSource"/>

    <!-- store preferred theme configuration in a cookie -->
    <bean class="org.springframework.web.servlet.theme.CookieThemeResolver" id="themeResolver" p:cookieName="theme" p:defaultThemeName="standard"/>

    <!-- This bean resolves specific types of exceptions to corresponding logical - view names for error views.
         The default behaviour of DispatcherServlet - is to propagate all exceptions to the servlet container:
         this will happen - here with all other types of exceptions. -->
    <bean class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver" p:defaultErrorView="uncaughtException">
        <property name="exceptionMappings">
            <props>
                <prop key=".DataAccessException">dataAccessFailure</prop>
                <prop key=".NoSuchRequestHandlingMethodException">resourceNotFound</prop>
                <prop key=".TypeMismatchException">resourceNotFound</prop>
                <prop key=".MissingServletRequestParameterException">resourceNotFound</prop>
            </props>
        </property>
    </bean>

    <!-- allows for integration of file upload functionality -->
    <bean class="org.springframework.web.multipart.commons.CommonsMultipartResolver" id="multipartResolver"/>

    <!-- layout.xmlに<definition name="*/*" extends="default">の設定をしたので、InternalResourceViewResolverはコメントアウトする。必要な場合は戻す -->
    <!-- Chaining view Resolvers http://static.springsource.org/spring/docs/3.0.0.RC1/spring-framework-reference/html/ch15s05.html -->
    <!--
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver" id="jstlViewResolver">
        <property name="prefix" value="/WEB-INF/views/" />
        <property name="suffix" value=".jsp" />
    </bean>
     -->

    <bean class="org.springframework.web.servlet.view.UrlBasedViewResolver" id="tilesViewResolver">
        <property name="order" value="1"/>
        <property name="viewClass" value="org.springframework.web.servlet.view.tiles2.TilesView"/>
    </bean>

    <bean class="org.springframework.web.servlet.view.tiles2.TilesConfigurer" id="tilesConfigurer">
        <property name="definitions">
          <list>
            <value>/WEB-INF/layouts/layouts.xml</value>
            <value>/WEB-INF/views/**/views.xml</value>
          </list>
        </property>
    </bean>

	<!-- MESSAGE SOURCE ACCESSOR -->
	<bean id="messageSourceAccessor"
		class="org.springframework.context.support.MessageSourceAccessor">
		<constructor-arg>
			<ref local="messageSource" />
		</constructor-arg>
	</bean>




</beans>

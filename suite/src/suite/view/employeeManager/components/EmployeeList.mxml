<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml"
    borderStyle="solid"
    horizontalScrollPolicy="off"
    dragEnter="doDragEnter(event)"
    dragDrop="doDragDrop(event)"
    backgroundAlpha="0" backgroundColor="#FF0000"> <!-- need a background color for drag and drop but can set alpha to 0 -->

    <mx:Metadata>
       [Event(name="addEmployee", type="suite.view.employeeManager.EmployeeListEvent")]
       [Event(name="duplicateEmployee", type="suite.view.employeeManager.EmployeeListEvent")]
       [Event(name="employeeQtyChange", type="suite.view.employeeManager.EmployeeListEvent")]
       [Event(name="removeEmployee", type="suite.view.employeeManager.EmployeeListEvent")]
    </mx:Metadata>

    <mx:Script>
        <![CDATA[
        	import suite.view.employeeManager.EmployeeListEvent;
        	import suite.model.vo.Employee;
        import mx.core.*;
        import mx.effects.*;
        import mx.events.*;
        import mx.managers.DragManager;
        import mx.effects.EffectManager;

        import suite.model.vo.Employee;
        import suite.view.employeeManager.EmployeeListEvent;

        public var items:Array = [];

        public var newItemStartX:int;
        public var newItemStartY:int;
        [Bindable]
        public var maxItems:int;
        public var showQuantity:Boolean;

        private var playingEffects:Dictionary = new Dictionary(true);

        public function addEmployee(employee:Employee):void
		{
			trace("[ EmployeeList.mxml ] addEmployee(id: " + employee.employeeId + ", name: " + employee.name + ")");

            var index:int = indexOf(employee.employeeId);
            var event:EmployeeListEvent;
            var item:EmployeeListItem;

            if (index != -1)
			{
			    item = items[index] as EmployeeListItem;
			    //if we don't keep track of what's playing a double-click can
			    //cause the list item to keep rising
			    if (playingEffects[item] == null)
			    {
                    var jump:Sequence = new Sequence();
                    var m1:Move = new Move(item)
                    m1.yBy = -5;
                    var m2:Move = new Move(item)
                    m2.yBy = 5;
                    jump.addChild(m1);
                    jump.addChild(m2);
                    jump.duration = 150;
                    playingEffects[item] = jump;
                    jump.addEventListener(EffectEvent.EFFECT_END, function(event:Event):void
                    {
                       delete playingEffects[item];
                    });
                    jump.play();
                }
                event = new EmployeeListEvent(EmployeeListEvent.DUPLICATE_EMPLOYEE);
                event.employee = item.employee;
                dispatchEvent(event);
            }
			else
			{
                index = items.length;
                if (maxItems <= 0 || index < maxItems)
				{
				    item = new EmployeeListItem();
				    if (showQuantity)
				    {
				        item.currentState = 'showQuantity';
				    }
				    item.employee = employee;
				    item.percentWidth = 100;
				    item.addEventListener(EmployeeListEvent.REMOVE_EMPLOYEE, removeItemHandler);
                    items[index] = item;
                    addChild(item);
                    layoutItems(index, true);
                    event = new EmployeeListEvent(EmployeeListEvent.ADD_EMPLOYEE);
                    event.employee = employee;
                    dispatchEvent(event);
                }
            }
        }

        public function getEmployees():Array
        {

        	trace("[ EmployeeList.mxml ] getEmployees()")

            var ret:Array = [];
            for (var i:int = 0; i < items.length; i++)
            {
                ret[i] = items[i].employee;
            }
            return ret;
        }

        private function removeItemHandler(event:Event):void
        {
        	trace("[ EmployeeList.mxml ] removeItemHandler(event)")

            var item:EmployeeListItem = event.target as EmployeeListItem;
            var index:int = indexOf(item.employee.employeeId);
            items.splice(index, 1);
            removeChild(item);
            layoutItems(index);
        }

        private function layoutItems(startIndex:int, scrollToBottom:Boolean=false):void
		{
			trace("[ EmployeeList.mxml ] layoutItems(startIndex:" + startIndex + ", scrollToBottom:" + scrollToBottom + ")")

            var n:int = items.length;
            var e:Move;
			for (var i:int = startIndex; i < n ; i++)
			{
			    var item:EmployeeListItem = items[i];
                var yTo:Number = i * (item.height);
                //still need to prevent items that are already in motion from getting
                //jumpy
			    if (playingEffects[item] == null)
			    {
                    e = new Move(item);
                    if (item.x == 0 && item.y == 0)
    				{
    					e.xFrom = newItemStartX;
    					e.yFrom = newItemStartY;
                    }

                    e.xTo = 0;
                    e.yTo = yTo;
                    playingEffects[item] = e;
                    e.addEventListener(EffectEvent.EFFECT_END, function(event:Event):void
                    {
                       delete playingEffects[item];
                    });
                    e.play();
                }
                else
                {
                    playingEffects[item].pause();
                    playingEffects[item].yTo = yTo;
                    playingEffects[item].play();
                }
            }
            //get the last event and if we should scroll make sure we can validate
            //and scroll to maxVPosition
            if (scrollToBottom)
            {
                e.addEventListener(EffectEvent.EFFECT_END, function(event:Event):void
                {
                    validateNow();
                    verticalScrollPosition = maxVerticalScrollPosition;
                });
            }
        }

        private function indexOf(employeeId:int):int
		{
            var index:int = -1;
            var n:int = items.length;

			trace("[ EmployeeList.mxml ] indexOf(employeeId:" + employeeId + ") - items.length:" + items.length)

			for (var i:int = 0; i < items.length; i++)
			{
				trace("[ EmployeeList.mxml ] items[" + i + "].employee.employeeId:" + items[i].employee.employeeId + " employeeId:" + employeeId)

                if (items[i].employee.employeeId == employeeId)
				{
					trace("[ EmployeeList.mxml ] " + items[i].employee.name + " is existing shopping cart")
                    index = i;
                    break;
                }
            }

			trace("[ EmployeeList.mxml ] return index:" + index)
            return index;
        }

        private function doDragEnter(event:DragEvent):void
        {
        	trace("[ EmployeeList.mxml ] doDragEnter(event)")

            if (event.dragSource.hasFormat("employee"))
            {
                DragManager.acceptDragDrop(IUIComponent(event.target));
            }
        }

        private function doDragDrop(event:DragEvent):void
        {
        	trace("[ EmployeeList.mxml ] doDragDrop(event)")

            var employee:Employee = event.dragSource.dataForFormat("employee") as Employee;
            addEmployee(employee);
        }

        ]]>
    </mx:Script>

</mx:Canvas>

<?xml version="1.0" encoding="utf-8"?>
<mx:Panel xmlns:mx="http://www.adobe.com/2006/mxml"
    xmlns:employeeManager="suite.view.employeeManager.components.*"
    layout="vertical"
    currentState="browse"
    verticalScrollPolicy="off"
    horizontalScrollPolicy="off"
    styleName="rosterPanel">

    <mx:Metadata>
        [Event(name="purchase", type="suite.view.employeeManager.EmployeeThumbEvent")]
        [Event(name="compare", type="suite.view.employeeManager.EmployeeThumbEvent")]
        [Event(name="details", type="suite.view.employeeManager.EmployeeThumbEvent")]
    </mx:Metadata>

    <mx:Script>
        <![CDATA[
    	import suite.view.employeeManager.EmployeeThumbEvent;
    	import suite.model.vo.Employee;
    	import suite.view.employeeManager.EmployeeFilter;
    	import suite.view.EmployeeManager;
        import flash.utils.Dictionary;

        import mx.collections.ArrayCollection;
        import mx.collections.IViewCursor;
        import mx.core.DragSource;
        import mx.core.IUIComponent;
        import mx.effects.Effect;
        import mx.effects.Fade;
        import mx.effects.Move;
        import mx.events.EffectEvent;
        import mx.events.DragEvent;
        import mx.managers.DragManager;

        import suite.model.vo.Employee;
        import suite.view.employeeManager.EmployeeFilter;
        import suite.view.employeeManager.EmployeeFilterEvent;
        import suite.view.employeeManager.EmployeeThumbEvent;


        private var accepted:Dictionary = new Dictionary();
        private var thumbnails:Array;
        private var filterCount:int;
        private var thumbnailState:String = 'browse'; //either 'browse' or 'compare'
        [Bindable]
        private var titleButtons:RosterTitleButtons; //the buttons that also allow the panel to switch sides

        override protected function createChildren():void
        {
        	trace("[ EmployeeRosterPanel.mxml ] createChildren()")
            super.createChildren();
            titleButtons = new RosterTitleButtons();
            titleBar.addChild(titleButtons);

        }

        override protected function layoutChrome(unscaledWidth:Number, unscaledHeight:Number):void
        {
        	trace("[ EmployeeRosterPanel.mxml ] layoutChrome(unscaledWidth:" + unscaledWidth + ", unscaledHeight:" + unscaledHeight + ")")
            super.layoutChrome(unscaledWidth, unscaledHeight);
            //when adding to a UIComponent (not a Container) need explicit width/height
            titleButtons.width = unscaledWidth / 2; //make it big so as we add cart items we can stretch)
            titleButtons.height = titleButtons.measuredHeight;
            //this placement algorithm is pretty hacky, there are better ways that probably
            //involve copying more of the Panel layoutChrome method and supporting methods
            titleButtons.move(statusTextField.x - titleButtons.width, titleTextField.y);
        }


        [Bindable]
        public var cartCount:int;

        //-----------------------------
        // roster
        //-----------------------------

        private var _roster:ArrayCollection;

        [Bindable]
        public function set roster(c:ArrayCollection):void
        {
        	trace("[ EmployeeRosterPanel.mxml ] set roster()")
            _roster = c;
            createThumbnails();
        }

        public function get roster():ArrayCollection
        {
        	trace("[ EmployeeRosterPanel.mxml ] get roster()")
            return _roster;
        }

        //----------------------------------------------------------------------
        // methods
        //----------------------------------------------------------------------

        private function createThumbnails():void
        {
        	trace("[ EmployeeRosterPanel.mxml ] createThumnails()")

            var i:int; //variables are hoisted up in scope so declare here to avoid warning
            if (thumbnails != null)
            {
                for (i=0; i < thumbnails.length; i++)
                {
                    thumbContent.removeChild(thumbnails[i]);
                }
            }

            var row:int = 0;
            var col:int = -1;
            var n:int = roster.length;
            thumbnails = new Array(n);
            filterCount = n;

            for (i=0; i < n; i++)
            {
                var thumb:EmployeeRosterThumbnail = new EmployeeRosterThumbnail();
                thumbnails[i] = thumb;
                thumbnails[i].showInAutomationHierarchy = true;
                thumb.employee = roster.getItemAt(i) as Employee;
                accepted[thumb.employee] = true;
                thumbContent.addChild(thumb);
                thumb.addEventListener(EmployeeThumbEvent.PURCHASE, employeeThumbEventHandler);
                thumb.addEventListener(EmployeeThumbEvent.COMPARE, employeeThumbEventHandler);
                thumb.addEventListener(EmployeeThumbEvent.DETAILS, employeeThumbEventHandler);
                thumb.addEventListener(DragEvent.DRAG_START,thumbDragStartHandler);
            }

            layoutRoster();
        }

        private function thumbDragStartHandler(event:MouseEvent):void
        {
        	trace("[ EmployeeRosterPanel.mxml ] thumbDragStartHandler(event:MouseEvent)")

            if (DragManager.isDragging == false)
            {
                var thumb:EmployeeRosterThumbnail = event.target as EmployeeRosterThumbnail;
                var ds:DragSource = new DragSource();
                ds.addData(thumb.employee, "employee");

                var di:EmployeeRosterThumbnail = new EmployeeRosterThumbnail();
                di.employee = thumb.employee;

                //the offset logic is honestly not the most intuitive but
                //it's necessary to get the dragProxy positioned correctly
                DragManager.doDrag(thumbContent, ds, event, di, -thumb.x,
            				       -thumb.y + thumbContent.verticalScrollPosition,
            				       0.5, false);
            }
        }

        public function filter(employeeFilter:EmployeeFilter, live:Boolean):void
        {
        	trace("[ EmployeeRosterPanel.mxml ] filter(employeeFilter:EmployeeFilter, live:" + live + ")")

            currentState = "browse";
            thumbnailState = "browse";
            var count:int=0;
            var n:int = thumbnails.length;
            var fadeOut:Fade = new Fade();
            fadeOut.alphaFrom = 1;
            fadeOut.alphaTo = .1;
            var targets:Array = [];
            for (var i:int = 0; i < n; i++)
            {
                var thumb:EmployeeRosterThumbnail = thumbnails[i];
                var employee:Employee = thumb.employee;
                if (employeeFilter.accept(employee))
                {
                    accepted[employee] = true;
                    thumb.alpha = 1;
                    count++;
                }
                else
                {
                    accepted[employee] = false;
                    if (live)
                    {
                        thumb.alpha = .1;
                    }
                    else if (thumb.alpha == 1) //only fade if we hadn't started
                    {
                        targets.push(thumb);
                    }
                }
            }
            employeeFilter.count = count;
            filterCount = count;

            if (targets.length > 0)
            {
                fadeOut.targets = targets;
                fadeOut.play();
                fadeOut.addEventListener(EffectEvent.EFFECT_END,
                    function(event:EffectEvent):void
                    {
                        layoutRoster();
                    });
            }
            else if (!live)
            {
                layoutRoster();
            }
        }

        private function layoutRoster():Effect
        {
        	trace("[ EmployeeRosterPanel.mxml ] layoutRoster()")

            var tileWidth:Number;
            var tileHeight:Number;
            var numCols:int;

            if (filterCount > 9 || currentState == "compare")
            {
                numCols = 4;
                tileWidth = EmployeeRosterThumbnail.COL_WIDTH_4;
                tileWidth = currentState == "compare"
                    ? EmployeeRosterThumbnail.COMPARE_WIDTH
                    : EmployeeRosterThumbnail.COL_WIDTH_4
                tileHeight = currentState == "compare"
                    ? height - 4
                    : EmployeeRosterThumbnail.COL_HEIGHT_4;
            }
            else if (filterCount > 4)
			{
                numCols = 3;
                tileWidth = EmployeeRosterThumbnail.COL_WIDTH_3;
                tileHeight = EmployeeRosterThumbnail.COL_HEIGHT_3;
            }
			else if (filterCount <= 9)
			{
                numCols = 2;
                tileWidth = EmployeeRosterThumbnail.COL_WIDTH_2;
                tileHeight = EmployeeRosterThumbnail.COL_HEIGHT_2;
            }
			else
			{
            }

            var row:int = 0;
            var col:int = -1;

			var move:Move = null;

            var n:int = roster.length;
			for (var i:int = 0 ; i < n ; i++)
			{
                var employee:Employee = roster.getItemAt(i) as Employee;
                var thumb:EmployeeRosterThumbnail = thumbnails[i];
                if (accepted[employee])
                {
                    thumb.currentState = "" + numCols + "cols";
                    col++;
                    if (col > numCols - 1)
					{
                        row++;
                        col = 0;
                    }

                    var xTo:Number = col * (tileWidth + EmployeeRosterThumbnail.HORIZONTAL_GAP);
                    var yTo:Number = row * (tileHeight + EmployeeRosterThumbnail.VERTICAL_GAP);

                    // If the thumbnail is already visible
					// animate it to its new position.
                    if (thumb.visible)
					{
                        // Animate only if the position is different
						// from its current position.
                        if (thumb.x != xTo || thumb.y != yTo)
						{
                            move = new Move(thumb);
                            move.xTo = xTo;
                            move.yTo = yTo;
                            move.play();
                        }
                    }

                    // If the thumbnail was not previously visible, sets its
					// x and y coordinates. We'll make it reappear after all
                    // the visible thumbnails have reached their new position.
					else
					{
                        thumb.x = xTo;
                        thumb.y = yTo;
                        thumb.includeInLayout = true;
                    }
                }
				else
				{
                    thumb.visible = false;
                    thumb.includeInLayout = false;
                }
            }

            if (!move)
			{
                // No visible thumbnails were animated to a new position;
				// fade in newly selected thumbnails right away.
                fadeInThumbnails();
            }
			else
			{
			    //since movement is happening get the scrollbar back to the top
				thumbContent.verticalScrollPosition = 0;
                // Fade in newly selected thumbnails after the last
				// visible thumbnail has moved to its new position.
                move.addEventListener(EffectEvent.EFFECT_END,
					function(event:EffectEvent):void
					{
						fadeInThumbnails();
					});
            }
            //return the last move to watch
            return move;
        }

        //return the last effect so we could add effectEnd handler if desired
        private function fadeInThumbnails():void
		{
			trace("[ EmployeeRosterPanel.mxml ] fadeInThumnails()")

			var n:int = thumbnails.length;
			var effect:Fade = new Fade();
			effect.alphaTo = 1;
			var targets:Array = [];
			for (var i:int = 0; i < n ; i++)
			{
			    var thumb:EmployeeRosterThumbnail = thumbnails[i];
			    if (accepted[thumb.employee] && !thumb.visible)
				{
                    thumb.alpha = 0;
                    thumb.visible = true;
                    targets.push(thumb);
                }
            }
            if (targets.length > 0)
            {
                effect.targets = targets;
                effect.play();
            }
        }

        private function showDetails(employee:Employee):void
        {
        	trace("[ EmployeeRosterPanel.mxml ] showDetails(employee:" + employee.name + ")")

            if (currentState == "details")
			{
                details.employee = employee;
                return;
            }

            var row:int = -1;

            //should be computed using border metrics instead of hard-coding the 20, but...
			var xTo:Number = thumbContent.width - EmployeeRosterThumbnail.COL_WIDTH_4 - 20;
            var yTo:Number;

            var move:Move;
            var first:Boolean = true;
            var selectedThumb:EmployeeRosterThumbnail;

            var n:int = thumbnails.length;
			for (var i:int = 0; i < n; i++)
			{
			    var thumb:EmployeeRosterThumbnail = thumbnails[i];
                if (thumb.visible)
				{
                    row++;
                    yTo = row * (EmployeeRosterThumbnail.COL_HEIGHT_4 + EmployeeRosterThumbnail.VERTICAL_GAP);

                    thumb.currentState = "4cols";

                    if (thumb.x != xTo || thumb.y != yTo)
					{
                        move = new Move(thumb);
                        if (first)
						{
                            move.addEventListener(EffectEvent.EFFECT_END,
								function(event:EffectEvent):void
								{
									details.employee = employee;
                                    currentState = "details";
								});

                            first = false;
                        }
                        move.xTo = xTo;
                        move.yTo = yTo;
                        move.play();
                    }

                    if (thumb.employee == employee)
                    {
                        selectedThumb = thumb;
                    }
                }
            }
            if (selectedThumb != null)
            {
                //make sure that the selected thumb is visible in the list on the right
                move.addEventListener(EffectEvent.EFFECT_END,
					function(e:EffectEvent):void
					{
					    var curpos:int = thumbContent.verticalScrollPosition;
					    if (selectedThumb.y < curpos)
					    {
					        thumbContent.verticalScrollPosition = y;
					    }
					    else if (selectedThumb.y + EmployeeRosterThumbnail.COL_HEIGHT_4 > curpos + thumbContent.height)
					    {
					        //this logic doesn't seem to be perfect but it will do
					        var diff:int = selectedThumb.y - (curpos + thumbContent.height)
					        thumbContent.verticalScrollPosition += diff + EmployeeRosterThumbnail.COL_HEIGHT_4 + EmployeeRosterThumbnail.VERTICAL_GAP;
					    }
					});
            }

        }

        private function employeeThumbEventHandler(event:EmployeeThumbEvent):void
        {
        	trace("[ EmployeeRosterPanel.mxml ] employeeThumbEventHandler(event:EmployeeThumbEvent)")

            if (event.type == EmployeeThumbEvent.DETAILS)
            {
                showDetails(event.employee);
            }
            else if (event.type == EmployeeThumbEvent.BROWSE)
            {
                if (thumbnailState == "browse")
                {
                    currentState = "browse";
                    layoutRoster();
                }
                else
                {
                    compare();
                }
            }
            else
            {
                dispatchEvent(event);
            }
        }

        public function compare(toCompare:Array=null):void
        {

        	trace("[ EmployeeRosterPanel.mxml ] compare(toCompare:Array=null)")

            currentState = "compare";
            thumbnailState = "compare";
            if (toCompare != null)
            {
                var n:int = thumbnails.length;
                for (var i:int = 0; i < n; i++)
                {
                    accepted[thumbnails[i].employee] = false;
                }
                for (i=0; i < toCompare.length; i++)
                {
                    accepted[toCompare[i]] = true;
                }
            }
            var lastEffect:Effect = layoutRoster();
            if (lastEffect != null)
            {
                lastEffect.addEventListener(EffectEvent.EFFECT_END,
                    function (event:EffectEvent):void
                    {
                        setCompareState();
                    });
            }
            else
            {
                setCompareState();
            }
        }

        private function setCompareState():void
        {
        	trace("[ EmployeeRosterPanel.mxml ] setCompareState()")

            //avoid an issue if the user clicks quickly where we move into
            //compare state even though we're no longer in compare
            if (currentState == "compare")
            {
                var n:int = thumbnails.length;
                for (var i:int = 0; i < n; i++)
                {
                    var thumb:EmployeeRosterThumbnail = thumbnails[i];
                    if (accepted[thumb.employee])
                    {
                        thumb.currentState = "compare";
                    }
                }

            }
        }

        ]]>
    </mx:Script>

    <mx:Binding source="cartCount" destination="titleButtons.cartCount" />
    <!-- two-way binding between the states of panel title buttons and the employee view state -->
    <mx:Binding source="EmployeeManager(parentDocument).currentState" destination="titleButtons.currentState" />
    <mx:Binding destination="EmployeeManager(parentDocument).currentState" source="titleButtons.currentState" />

    <mx:Canvas width="100%" height="100%"
        verticalScrollPolicy="off"
        horizontalScrollPolicy="off"
        paddingRight="0">
        <mx:Canvas id="thumbContent" width="100%" height="100%"
            horizontalScrollPolicy="off"/>
        <employeeManager:EmployeeDetails id="details"
            width="{EmployeeRosterThumbnail.COL_WIDTH_4 * 3}"
            height="100%"
            visible="false"
            compare="employeeThumbEventHandler(event)"
            purchase="employeeThumbEventHandler(event)"
            browse="employeeThumbEventHandler(event)" />
    </mx:Canvas>

    <mx:states>
        <mx:State name="browse">
            <mx:SetProperty name="title" value="Browse"/>
        </mx:State>

        <mx:State name="compare">
            <mx:SetProperty name="title" value="Employee Comparison"/>
        </mx:State>

        <mx:State name="details">
            <mx:SetProperty name="title" value="Employee Details"/>
            <mx:SetProperty target="{details}" name="visible" value="true"/>
        </mx:State>
    </mx:states>

</mx:Panel>

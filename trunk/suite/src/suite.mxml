<?xml version="1.0" encoding="utf-8"?>
<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml" xmlns="*"
    layout="absolute" minWidth="990" minHeight="550"
    xmlns:views="suite.view.*"
    preinitialize="loadStyle()"
    creationComplete="startService()"
    pageTitle="Suite">

    <mx:Script>
    <![CDATA[
        import mx.collections.IViewCursor;
        import mx.collections.ArrayCollection;
        import mx.rpc.events.ResultEvent;
        import mx.events.StyleEvent;
        import mx.styles.StyleManager;

    	import suite.model.vo.Employee;

        [Bindable]
        private var roster:ArrayCollection;

        private var currentTheme:String = "beige";

        private function toggleTheme():void
        {
        	trace("[ suite.mxml ] toggleTheme()")
            if (currentTheme == "beige")
            {
                currentTheme = "blue";
            }
            else
            {
                currentTheme = "beige";
            }

            loadStyle();
        }

        private function startService():void
        {
        	trace("[ suite.mxml ] startService()")
            employeeService.send();
        }

        private function loadStyle():void
        {
        	trace("[ suite.mxml ] loadStyle()")
            var eventDispatcher:IEventDispatcher =
                StyleManager.loadStyleDeclarations(currentTheme + ".swf");
            eventDispatcher.addEventListener(StyleEvent.COMPLETE, completeHandler);
        }

        private function completeHandler(event:StyleEvent):void
        {
        	trace("[ suite.mxml ] completeHandler(event:StyleEvent)")
            image.source = acb.getStyle("storeLogo");
            homeView.updateMapImage();
            super.initialized = true;
        }

        private function employeeServiceResultHandler(event:ResultEvent):void
        {
        	trace("[ suite.mxml ] employeeServiceResultHandler(event:ResultEvent)")
            //HTTPService returns an ArrayCollection for nested arrays
            var employees:ArrayCollection = event.result.roster.employee;
            var temp:ArrayCollection = new ArrayCollection();
            var cursor:IViewCursor = employees.createCursor();
            while (!cursor.afterLast)
            {
                var employee:Employee = new Employee();
                employee.fill(cursor.current);
                temp.addItem(employee);
                cursor.moveNext();
            }
            roster = temp;
        }

        override public function set initialized(value:Boolean):void
        {
        	trace("[ suite.mxml ] set initialized(value:" + value + ")")
            // Hold off until the Runtime CSS SWF is done loading.
        }
    ]]>
    </mx:Script>

    <mx:Style source="main.css"/>

    <mx:HTTPService id="employeeService" url="data/roster.xml"
        result="employeeServiceResultHandler(event)"/>

    <mx:VBox width="990" paddingLeft="0" paddingRight="0" horizontalCenter="0" top="12">

        <mx:ApplicationControlBar id="acb" width="100%" styleName="storeControlBar">
            <mx:Image id="image"
                      click="toggleTheme()"
                      toolTip="Change Theme"/>
            <mx:ToggleButtonBar
                height="100%"
                dataProvider="{storeViews}"
                styleName="storeButtonBar"/>
        </mx:ApplicationControlBar>

        <!-- using a creationPolicy of "auto" or "queued" has a bug at time of writing
             that prevents initial states from applying styles correctly.
             plus the instantiation of the cart view can cause a performance
             hiccup which we might prefer at startup -->
        <mx:ViewStack id="storeViews" width="100%" height="550" creationPolicy="all">
            <views:HomeView id="homeView" label="Home"
                showEffect="WipeDown" hideEffect="WipeUp"
                />
            <views:EmployeeManager id="pView" label="Employees" roster="{roster}"
                showEffect="WipeDown" hideEffect="WipeUp"
                />
            <views:SupportView id="supportView" label="Support"
                showEffect="WipeDown" hideEffect="WipeUp"
                />
        </mx:ViewStack>

    </mx:VBox>

</mx:Application>
